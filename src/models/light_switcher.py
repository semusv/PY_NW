#–°—Ç–æ—Ö–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (SGD ‚Äî Stochastic Gradient Descent)

import numpy as np
import matplotlib.pyplot as plt

# =============================================
# –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# =============================================
streetlights = np.array([
    [1, 0, 1],
    [0, 1, 1],
    [0, 0, 1],
    [1, 1, 1],
    [0, 1, 1],
    [1, 0, 1]
])

walk_vs_stop = np.array([[0], [1], [0], [1], [1], [0]])
weights = np.array([0.5, 0.48, -0.7])
learning_rate = 0.1
iterations = 10

# =============================================
# –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
# =============================================
error_history = []          # –°—É–º–º–∞—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ —ç–ø–æ—Ö–∞–º
step_error_history = []     # –û—à–∏–±–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ –≤–Ω—É—Ç—Ä–∏ —ç–ø–æ—Ö
weight_history = []         # –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–æ–≤

print("üö¶ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
print(f"üîπ –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞: {weights}")
print("-" * 50)

for epoch in range(iterations):
    total_error = 0
    epoch_errors = []
    
    print(f"\nüîµ –≠–ø–æ—Ö–∞ {epoch + 1}/{iterations}")
    
    for i in range(len(streetlights)):
        input_data = streetlights[i]
        target = walk_vs_stop[i]
        
        prediction = input_data.dot(weights)
        error = (target - prediction) ** 2
        total_error += error
        epoch_errors.append(error[0])
        
        delta = prediction - target
        gradient = delta * input_data
        weights = weights - learning_rate * gradient
        
        print(f"–ü—Ä–∏–º–µ—Ä {i+1}: –û—à–∏–±–∫–∞ = {error[0]:.4f}")
    
    error_history.append(total_error[0])
    step_error_history.append(epoch_errors)
    weight_history.append(weights.copy())
    
    print(f"üìä –°—É–º–º–∞—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ —ç–ø–æ—Ö–∏: {total_error[0]:.5f}")

# =============================================
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (3 –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
# =============================================
plt.figure(figsize=(18, 5))

# –ì—Ä–∞—Ñ–∏–∫ 1: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ —ç–ø–æ—Ö–∞–º
plt.subplot(1, 3, 1)
plt.plot(error_history, 'r-o', linewidth=2)
plt.title("–°—É–º–º–∞—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ —ç–ø–æ—Ö–∞–º", fontsize=12)
plt.xlabel("–ù–æ–º–µ—Ä —ç–ø–æ—Ö–∏", fontsize=10)
plt.ylabel("–û—à–∏–±–∫–∞ (MSE)", fontsize=10)
plt.grid(True, linestyle='--', alpha=0.7)

# –ì—Ä–∞—Ñ–∏–∫ 2: –û—à–∏–±–∫–∏ –≤–Ω—É—Ç—Ä–∏ —ç–ø–æ—Ö
plt.subplot(1, 3, 2)
for i, errors in enumerate(step_error_history):
    plt.plot(range(1, len(streetlights) + 1), errors, '-o', label=f'–≠–ø–æ—Ö–∞ {i+1}')
plt.title("–û—à–∏–±–∫–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –≤–Ω—É—Ç—Ä–∏ —ç–ø–æ—Ö", fontsize=12)
plt.xlabel("–ù–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞", fontsize=10)
plt.ylabel("–û—à–∏–±–∫–∞ (MSE)", fontsize=10)
plt.legend(fontsize=8, bbox_to_anchor=(1.05, 1))
plt.grid(True, linestyle='--', alpha=0.7)

# –ì—Ä–∞—Ñ–∏–∫ 3: –î–∏–Ω–∞–º–∏–∫–∞ –≤–µ—Å–æ–≤
plt.subplot(1, 3, 3)
weight_history = np.array(weight_history)
plt.plot(weight_history[:, 0], 'b-', label='–ö—Ä–∞—Å–Ω—ã–π', linewidth=2)
plt.plot(weight_history[:, 1], 'g-', label='–ñ–µ–ª—Ç—ã–π', linewidth=2)
plt.plot(weight_history[:, 2], 'k-', label='–ó–µ–ª–µ–Ω—ã–π', linewidth=2)
plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤", fontsize=12)
plt.xlabel("–ù–æ–º–µ—Ä —ç–ø–æ—Ö–∏", fontsize=10)
plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞", fontsize=10)
plt.legend(fontsize=10)
plt.grid(True, linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()

# =============================================
# –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
# =============================================
print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:")
print(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞: {np.round(weights, 4)}")
print("\nüß† –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
print(f"‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç: {'–í–∞–∂–µ–Ω' if weights[0] > 0.3 else '–ù–µ –≤–∞–∂–µ–Ω'}")
print(f"‚Ä¢ –ñ–µ–ª—Ç—ã–π —Å–≤–µ—Ç: {'–í–∞–∂–µ–Ω' if weights[1] > 0.3 else '–ù–µ –≤–∞–∂–µ–Ω'}")
print(f"‚Ä¢ –ó–µ–ª–µ–Ω—ã–π —Å–≤–µ—Ç: {'–í–∞–∂–µ–Ω' if weights[2] > 0.3 else '–ù–µ –≤–∞–∂–µ–Ω'}")